import axios from "axios";
import { useState, useEffect, useRef } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Link,
} from "react-router-dom";

import Landing from "./pages/Landing";
import Glossary from "./pages/Glossary";
import AboutNova from "./pages/AboutNova";
import Contact from "./pages/Contact";
import Examples from "./pages/Examples";
import Guestbook from "./pages/Guestbook";
import Disclaimer from "./pages/Disclaimer";

export default function App() {
  const [chatLog, setChatLog] = useState(() => {
    const saved = localStorage.getItem("nova-chat-log");
    return saved ? JSON.parse(saved) : [];
  });

  const [userQuestion, setUserQuestion] = useState("");
  const bottomRef = useRef(null);

  useEffect(() => {
    localStorage.setItem("nova-chat-log", JSON.stringify(chatLog));
  }, [chatLog]);

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chatLog]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (userQuestion.trim() === "") return;

    const newUserMessage = {
      role: "user",
      content: userQuestion,
      timestamp: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
    };
    const thinking = { role: "assistant", content: "Thinking... ðŸ¤–" };
    setChatLog((prev) => [...prev, newUserMessage, thinking]);
    setUserQuestion("");

    try {
      const response = await axios.post(
        "https://api.openai.com/v1/chat/completions",
        {
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: "You are Nova, a wise and helpful AI trading assistant." },
            ...chatLog,
            newUserMessage,
          ],
        },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,
          },
        }
      );

      const reply = response.data.choices[0].message.content;
      const novaReply = {
        role: "assistant",
        content: reply,
        timestamp: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
      };

      setChatLog((prev) => {
        const cleaned = [...prev];
        cleaned.pop();
        return [...cleaned, novaReply];
      });
    } catch (error) {
      console.error("OpenAI error:", error);
      setChatLog((prev) => {
        const cleaned = [...prev];
        cleaned.pop();
        return [
          ...cleaned,
          {
            role: "assistant",
            content: "Sorry, something went wrong while getting Novaâ€™s response.",
            timestamp: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
          },
        ];
      });
    }
  };

  const Chat = () => {
    // Clear previous chat on mount
    useEffect(() => {
      setChatLog([]);
      localStorage.removeItem("nova-chat-log");
    }, []);

    return (
      <div className="App min-h-screen text-white p-6 relative bg-[url('/images/nova-command-center.jpg')] bg-cover bg-fixed bg-center">
        <div className="absolute inset-0 bg-black/60 z-0" />

        {/* ðŸ”² Fixed Header */}
        <header className="fixed top-0 left-0 w-full z-20 bg-black/80 p-4 shadow backdrop-blur-md border-b border-yellow-400">
          <div className="flex flex-col items-center space-y-2">
            <h1 className="text-yellow-400 font-bold text-2xl text-center">Nova's Trading Company</h1>
            <nav className="space-x-6">
              <Link to="/" className="hover:text-yellow-300">Home</Link>
              <Link to="/chat" className="hover:text-yellow-300">Chat</Link>
              <Link to="/glossary" className="hover:text-yellow-300">Glossary</Link>
              <Link to="/examples" className="hover:text-yellow-300">Trade Examples</Link>
              <Link to="/contact" className="hover:text-yellow-300">Contact</Link>
              <Link to="/about-nova" className="hover:text-yellow-300">About Nova</Link>
              <Link to="/guestbook" className="hover:text-yellow-300">Guestbook</Link>
              <Link to="/disclaimer" className="hover:text-yellow-300">Disclaimer</Link>
            </nav>
          </div>
        </header>

        {/* ðŸ”² Chat Section */}
        <div className="relative z-10 pt-36">
          <div className="max-w-xl mx-auto pt-4 flex flex-col space-y-6">
            <div className="w-full max-h-[500px] overflow-y-auto bg-white text-black p-4 rounded-xl shadow-lg border border-yellow-300 backdrop-blur-sm">
              {chatLog.map((msg, index) => (
                <div
                  key={index}
                  className={`p-2 rounded ${
                    msg.role === "user"
                      ? "bg-yellow-100 text-right"
                      : "bg-gray-100 text-left"
                  }`}
                >
                  <div>
                    <strong>{msg.role === "user" ? "You" : "Nova"}:</strong> {msg.content}
                  </div>
                  {msg.timestamp && (
                    <div className="text-xs text-gray-500 mt-1">
                      {msg.timestamp}
                    </div>
                  )}
                </div>
              ))}
              <div ref={bottomRef} />
            </div>

            <form onSubmit={handleSubmit} className="w-full flex flex-col space-y-4 px-2 sm:px-4">
              <input
                type="text"
                placeholder="Ask Nova something..."
                value={userQuestion}
                onChange={(e) => setUserQuestion(e.target.value)}
                className="text-black p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-yellow-400"
              />
              <button
                type="submit"
                className="bg-yellow-400 text-gray-900 p-2 md:p-3 rounded hover:bg-yellow-300"
              >
                Submit
              </button>
            </form>
          </div>
        </div>
      </div>
    );
  };

  return (
    <Router>
      <Routes>
        <Route path="/" element={<Landing />} />
        <Route path="/chat" element={<Chat />} />
        <Route path="/glossary" element={<Glossary />} />
        <Route path="/examples" element={<Examples />} />
        <Route path="/contact" element={<Contact />} />
        <Route path="/about-nova" element={<AboutNova />} />
        <Route path="/guestbook" element={<Guestbook />} />
        <Route path="/disclaimer" element={<Disclaimer />} />
      </Routes>
    </Router>
  );
}
